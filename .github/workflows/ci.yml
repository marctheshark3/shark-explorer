name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: shark_explorer_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      matrix:
        python-version: [3.9]

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov

    - name: Run tests with coverage
      env:
        DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/shark_explorer_test
      run: |
        pytest --cov=shark_api --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy

    - name: Run linters
      run: |
        flake8 .
        black --check .
        isort --check-only .
        mypy shark-api/src

  build-and-push:
    needs: [test, lint]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push API
      uses: docker/build-push-action@v4
      with:
        context: ./shark-api
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/shark-api:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/shark-api:${{ github.sha }}
        cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/shark-api:buildcache
        cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/shark-api:buildcache,mode=max

    - name: Build and push Indexer
      uses: docker/build-push-action@v4
      with:
        context: ./shark-indexer
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/shark-indexer:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/shark-indexer:${{ github.sha }}
        cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/shark-indexer:buildcache
        cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/shark-indexer:buildcache,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3

    - name: Deploy to production
      env:
        DOCKER_HOST: ${{ secrets.DEPLOY_HOST }}
        DOCKER_CERT_PATH: /tmp/docker-certs
      run: |
        mkdir -p $DOCKER_CERT_PATH
        echo "${{ secrets.DOCKER_CA }}" > $DOCKER_CERT_PATH/ca.pem
        echo "${{ secrets.DOCKER_CERT }}" > $DOCKER_CERT_PATH/cert.pem
        echo "${{ secrets.DOCKER_KEY }}" > $DOCKER_CERT_PATH/key.pem
        docker-compose pull
        docker-compose up -d 